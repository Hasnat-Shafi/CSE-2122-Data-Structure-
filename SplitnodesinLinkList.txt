#include<bits/stdc++.h>
using namespace std;


struct node {
     int data;
     node* next;
};

void insert(int data, node*& head){
     node* newnode = new node;
     node* temp = head;
     newnode->data = data;
     newnode->next = NULL;
     if(temp == NULL){
          head = newnode;
     } else{
          while(temp->next != NULL){
               temp = temp->next;
          }
          temp->next = newnode;
     }
}

node* split(node* head, node*& head_a){
     int c = 0;
     node* temp = head;
     while(temp != NULL){
          c++;
          temp = temp->next;
     }
     int pos = c/2 + c%2;
     int i = 1;
     node* a_head = head;
     while(i <= pos){
          insert(a_head->data, head_a);
          i++;
          a_head = a_head->next;
     }

     return a_head;
}

void merge(node* head_a, node* head_b, node*& merge_list){
     while(head_a != NULL and head_b != NULL){
          if(head_a->data <= head_b->data){
               insert(head_a->data, merge_list);
               head_a = head_a->next;
          } else{
               insert(head_b->data, merge_list);
               head_b = head_b->next;
          }
     }
     while(head_a){
          insert(head_a->data, merge_list);
          head_a = head_a->next;
     }
     while(head_b){
          insert(head_b->data, merge_list);
          head_b = head_b->next;
     }
}

void display(node* a){
     while(a != NULL){
          cout << a->data <<' ';
          a = a->next;
     }
     cout <<'\n';
}

int main(){
    node* head = NULL;
    int a[7] = {1, 2, 3, 4, 5, 6, 7};

    for(int i = 0; i < 7; i++){
          cout << a[i] <<' ';
        insert(a[i], head);
    }
cout << '\n';
    node* head_a = NULL;
    node* head_b = split(head, head_a);
    cout << "Original List: ";
    display(head);
    cout << "First Half: ";
    display(head_a);
    cout << "Second Half: ";
    display(head_b);
    node* merge_list = NULL;
    merge(head_a, head_b, merge_list);
    display(merge_list);
    return 0;
}